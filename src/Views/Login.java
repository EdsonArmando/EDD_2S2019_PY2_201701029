package Views;

import Nodes.NodeAVL;
import Nodes.NodeHash;
import Nodes.NodoContenido;
import Nodes.NodoLateral;
import Structures.Bitacora;
import Structures.TablaHash;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;

/**
 *
 * @author EG
 */
public class Login extends javax.swing.JFrame {

    public TablaHash tabla = new TablaHash();
    Bitacora bitacora = new Bitacora();
    private File carpeta;
    private String subCarpeta = "/";
    private String username = "";
    private String carpetaPadre = "home";
    private int contClik = 0;
    private String nombreFile = "-";
    private File directorio;
    private String name = "";
    private int x = 0;
    private int y = 0;
    private int cont = 0;

    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        Login = new javax.swing.JButton();
        idUsername = new javax.swing.JTextField();
        Registrar = new javax.swing.JButton();
        idPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setText("INICIO DE SESION");

        Login.setLabel("Login");
        Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginActionPerformed(evt);
            }
        });

        idUsername.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        idUsername.setText("username");

        Registrar.setText("Registrar");
        Registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrarActionPerformed(evt);
            }
        });

        idPassword.setText("jPasswordField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Login)
                        .addGap(18, 18, 18)
                        .addComponent(Registrar))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(idPassword, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(label1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addComponent(idUsername, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(idPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Login)
                    .addComponent(Registrar))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginActionPerformed
        x = 0;
        y = 0;
        /*try {
         Runtime.getRuntime().exec("cmd /c Hash.png", null, new File(System.getProperty("user.dir")));
         } catch (IOException ex) {
         Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
         }*/
        username = idUsername.getText();
        String password = idPassword.getText();
        boolean log=true;
        try {
            log = tabla.Login(username, password);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (log) {
            try {
                carpeta = new File(System.getProperty("user.dir") + "\\raiz_" + username);
                MenuUser(username, "/", "/", carpeta);
            } catch (IOException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Verifique sus Credenciales");
        }
    }//GEN-LAST:event_LoginActionPerformed

    public LinkedList<NodeAVL> listadoArchivos(NodoContenido listado) {
        if (listado == null) {
            return null;
        }
        listado.avl.tempo.clear();
        listado.avl.reco(listado.raiz);
        LinkedList<NodeAVL> nuevo = listado.avl.devLista();
        return nuevo;
    }

    public void MenuUser(String username, String padre, String hijo, File carpeta) throws IOException, InterruptedException {
        x = 0;
        y = 0;
        MenuUsuario Menu = new MenuUsuario(this, hijo);
        NodeHash temporal = tabla.getNodeHash(username);
        NodoLateral lateral = temporal.matrix.listlat.buscarNodo(hijo);
        NodoContenido nodoMatriz = temporal.matrix.returnNodoMatriz(padre, hijo, padre + "/" + hijo);
        carpetaPadre = hijo;
        Menu.idBienvenida.setText("Bienvenido al sistema " + username);
        Menu.idDirectorio.setText(".." + padre + hijo);
        Menu.idMasivaUsuario.setVisible(false);
        Menu.idHash.setVisible(false);
        Menu.idBitacora.setVisible(false);
        LinkedList<NodeAVL> listado = listadoArchivos(nodoMatriz);
        LinkedList<NodoContenido> carpetas = temporal.matrix.listlat.devList(hijo);
        if (carpetas == null || carpetas.size() == 0) {

        } else {
            for (int i = 0; i < carpetas.size(); i++) {
                JLabel archivo = new JLabel();
                archivo.setToolTipText(carpetas.get(i).rutax);
                archivo.setName(carpetas.get(i).rutax);
                archivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd_2s2019_py2_201701029/file.png")));
                archivo.setText(carpetas.get(i).rutax);
                archivo.setHorizontalTextPosition(JLabel.CENTER);
                archivo.setVerticalTextPosition(JLabel.BOTTOM);
                archivo.addMouseListener(new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        contClik += 1;
                        nombreFile = archivo.getName();
                        if (contClik == 2) {
                            try {
                                contClik = 0;
                                MenuUser(username, Menu.nombbre(), nombreFile, carpeta);
                            } catch (IOException ex) {
                                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }

                    @Override
                    public void mousePressed(MouseEvent e) {

                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {

                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {

                    }

                    @Override
                    public void mouseExited(MouseEvent e) {

                    }

                });
                archivo.setBounds(x, y, 50, 70);
                y += 75;
                if (y > 400) {
                    y = 0;
                    x += 60;
                }
                Menu.panelFile.add(archivo);
            }
        }
        if (listado == null || listado.size() == 0) {
            System.out.println("No hay elementos dentro de la carpeta actual");
        } else {
            for (int i = 0; i < listado.size(); i++) {
                JLabel archivo = new JLabel();
                archivo.setToolTipText(listado.get(i).nombreArchivo);
                archivo.setName(listado.get(i).nombreArchivo);
                if (listado.get(i).ieCarpeta == true) {
                    archivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd_2s2019_py2_201701029/file.png")));
                } else {
                    archivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd_2s2019_py2_201701029/file2.png")));
                }
                archivo.setText(listado.get(i).nombreArchivo);
                archivo.setHorizontalTextPosition(JLabel.CENTER);
                archivo.setVerticalTextPosition(JLabel.BOTTOM);
                archivo.addMouseListener(new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        contClik += 1;
                        nombreFile = archivo.getName();
                        if (contClik == 2) {
                            try {
                                contClik = 0;
                                MenuUser(username, Menu.nombbre(), nombreFile, carpeta);
                            } catch (IOException ex) {
                                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }

                    @Override
                    public void mousePressed(MouseEvent e) {

                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {

                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {

                    }

                    @Override
                    public void mouseExited(MouseEvent e) {

                    }

                });
                archivo.setBounds(x, y, 50, 70);
                y += 75;
                if (y > 400) {
                    y = 0;
                    x += 60;
                }
                Menu.panelFile.add(archivo);
            }
        }
        Menu.idContenido.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                String ruta = JOptionPane.showInputDialog("Ingrese el nombre del Archivo");
                nodoMatriz.avl.get(nodoMatriz.raiz, ruta);
                NodeAVL nuevo = nodoMatriz.avl.getNode();
                JTextArea texto = new JTextArea();
                texto.setBounds(10,10,150,150);
                texto.setText(" "+nuevo.contenido);
                JFrame temp = new JFrame(ruta);
                temp.add(texto);
                temp.setSize(200, 200);
                temp.setLocationRelativeTo(null);
                temp.setVisible(true);
            }
        });
        Menu.idArchModificar.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String ruta = JOptionPane.showInputDialog("Ingrese el nombre del Archivo");
                    String nuevoNombre = JOptionPane.showInputDialog("Ingrese el nuevo nombre");
                    nodoMatriz.avl.Modificar(nodoMatriz.raiz, ruta, nuevoNombre);
                    nodoMatriz.raiz = nodoMatriz.avl.NuevaRaiz();
                    nodoMatriz.avl.raizNueva = null;
                    bitacora.push(username, "Ha Modificado el archivo" + ruta);
                    Menu.dispose();
                    MenuUser(username, padre, hijo, carpeta);
                } catch (IOException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        });
        Menu.idEliminar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String nombre = JOptionPane.showInputDialog("Ingres el nombre de la carpeta");
                try {
                    temporal.matrix.Eliminar(nombre, Menu.nombbre());
                    bitacora.push(username, "Ha eliminado la carpeta " + nombre);
                } catch (Exception s) {
                }

            }
        });
        Menu.idArchSubir.addActionListener((new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String nombre = JOptionPane.showInputDialog("Ingres el nombre del archivo");
                    bitacora.push(username, "Creo la carptea"+ nombre);
                    nodoMatriz.avl.descargarArchivo(nodoMatriz.raiz, nombre);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }));
        Menu.idMatriz.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    temporal.matrix.graficarMatriz();
                    Runtime.getRuntime().exec("cmd /c matrix.png", null, new File(System.getProperty("user.dir")));
                    jframeReporte("matrix");
                    bitacora.push(username, "Genero el reporte de la matriz");
                } catch (IOException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
        Menu.idArchCompartir.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String nombreUser = JOptionPane.showInputDialog("Ingrese el usuario Destino");
                String archivo = JOptionPane.showInputDialog("Ingrese el nombre del Archvio");
                nodoMatriz.avl.get(nodoMatriz.raiz, archivo);
                NodeAVL tem = nodoMatriz.avl.getNode();
                NodeHash temp = tabla.getNodeHash(nombreUser);
                NodoContenido temp1 = temp.matrix.returnNodoMatriz("/", "home", "");
                temp1.raiz = temp1.avl.insert(temp1.raiz, tem.nombreArchivo, tem.contenido, false,username);
                bitacora.push(username, "Compartio un archivo :" + nombreUser);
            }
        });
        Menu.idArchCrear.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String ruta = JOptionPane.showInputDialog("Ingrese el nombre del Archivo");
                String contenido = JOptionPane.showInputDialog("Ingrese el contenido del Archivo");
                boolean existe = nodoMatriz.avl.existe(nodoMatriz.raiz, ruta);
                if(existe == true){
                    int dialogResult = JOptionPane.showConfirmDialog (null, "Desea sobreescribir el archivo");
                    if(dialogResult == JOptionPane.YES_OPTION){
                        nodoMatriz.avl.Sobreescribir(nodoMatriz.raiz, ruta, ruta,contenido);
                        nodoMatriz.raiz = nodoMatriz.avl.NuevaRaiz();
                        nodoMatriz.avl.raizNueva = null;
                    }
                    
                }else{
                    nodoMatriz.raiz = nodoMatriz.avl.insert(nodoMatriz.raiz, ruta, contenido, false,username);
                }                     
                bitacora.push(username, "Cero un Archivo :");
                JLabel archivo = new JLabel();
                archivo.setToolTipText(ruta);
                archivo.setName(ruta);
                archivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd_2s2019_py2_201701029/file2.png")));
                archivo.setText(ruta);
                archivo.setHorizontalTextPosition(JLabel.CENTER);
                archivo.setVerticalTextPosition(JLabel.BOTTOM);
                archivo.addMouseListener(new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        contClik += 1;
                        nombreFile = archivo.getName();
                        if (contClik == 2) {
                            try {
                                contClik = 0;
                                MenuUser(username, Menu.nombbre(), nombreFile, carpeta);
                            } catch (IOException ex) {
                                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }

                    @Override
                    public void mousePressed(MouseEvent e) {

                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {

                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {

                    }

                    @Override
                    public void mouseExited(MouseEvent e) {

                    }

                });
                /*if(cont==4){
                 y+=13;
                 x=0;
                 cont=0;
                 }*/
                archivo.setBounds(x, y, 50, 70);
                y += 75;
                if (y > 400) {
                    y = 0;
                    x += 60;
                }
                Menu.panelFile.add(archivo);
                Menu.panelFile.repaint();
            }
        });
        Menu.idEliminarArch.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String ruta = JOptionPane.showInputDialog("Ingrese el nombre del Archivo");
                    nodoMatriz.avl.Eliminar(nodoMatriz.raiz, ruta);
                    nodoMatriz.raiz = nodoMatriz.avl.NuevaRaiz();
                    nodoMatriz.avl.raizNueva = null;
                    bitacora.push(username, "Ha borrado el archivo" + ruta);
                    Menu.dispose();
                    MenuUser(username, padre, hijo, carpeta);
                } catch (IOException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        Menu.idAvl.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    nodoMatriz.avl.graphAVL(nodoMatriz.raiz);
                    nodoMatriz.avl.importImage();
                    Runtime.getRuntime().exec("cmd /c avl.png", null, new File(System.getProperty("user.dir")));
                    jframeReporte("Hash");
                    bitacora.push(username, "Genero reporte AVL");
                } catch (IOException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        Menu.idCrear.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String ruta = JOptionPane.showInputDialog("Ingrese el nombre de la carpeta");
                if (hijo.equals("/")) {
                    temporal.matrix.insertar(hijo, ruta, hijo + ruta);
                } else {
                    temporal.matrix.insertar(hijo, ruta, hijo + "/" + ruta);
                }
                temporal.matrix.insertar(ruta, "", "");
                bitacora.push(username, "Creo la  carpeta " + ruta);
                //No se insera en avl al carpeta solo matriz
                //nodoMatriz.raiz = nodoMatriz.avl.insert(nodoMatriz.raiz, ruta, "", true);
                JLabel archivo = new JLabel();
                archivo.setToolTipText(ruta);
                archivo.setName(ruta);
                archivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd_2s2019_py2_201701029/file.png")));
                archivo.setText(ruta);
                archivo.setHorizontalTextPosition(JLabel.CENTER);
                archivo.setVerticalTextPosition(JLabel.BOTTOM);
                archivo.addMouseListener(new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        contClik += 1;
                        nombreFile = archivo.getName();
                        if (contClik == 2) {
                            try {
                                contClik = 0;
                                MenuUser(username, Menu.nombbre(), nombreFile, carpeta);

                            } catch (IOException ex) {
                                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }

                    @Override
                    public void mousePressed(MouseEvent e) {

                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {

                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {

                    }

                    @Override
                    public void mouseExited(MouseEvent e) {

                    }

                });

                /*if(cont==4){
                 y+=13;
                 x=0;
                 cont=0;
                 }*/
                archivo.setBounds(x, y, 50, 70);
                y += 75;
                if (y > 400) {
                    y = 0;
                    x += 60;
                }

                Menu.panelFile.add(archivo);
                Menu.panelFile.repaint();
            }

        });
        if (username.equals("admin")) {
            Menu.idHash.setVisible(true);
            Menu.idBitacora.setVisible(true);
            Menu.idBitacora.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        bitacora.graphBitacora();
                    } catch (IOException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            });
            Menu.idMasivaUsuario.setVisible(true);
            Menu.idHash.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        tabla.graphTable();
                        Runtime.getRuntime().exec("cmd /c Hash.png", null, new File(System.getProperty("user.dir")));
                        jframeReporte("Hash");
                    } catch (IOException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            });

            Menu.idMasivaUsuario.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    cargaMasiva(JOptionPane.showInputDialog("Ingrese la ruta de csv"), "usuarios");
                    JOptionPane.showMessageDialog(null, "Carga Masiva Exitosa");
                    bitacora.push(username, "Realizo una carga Masiva Usuarios");
                    tabla.modelo.addColumn("Usuario");
                    tabla.modelo.addColumn("Error");
                    tabla.reporte();
                }

            });
        }
        Menu.idGrafo.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    temporal.matrix.graficarGrafo();
                    bitacora.push(username, "Genero el reporte del grafo");
                    jframeReporte("grafo");
                    Runtime.getRuntime().exec("cmd /c grafo.png", null, new File(System.getProperty("user.dir")));
                } catch (IOException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        });
        Menu.idMasivaArch.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String[] archivos = cargaMasiva(JOptionPane.showInputDialog("Ingrese la ruta"), "archivos");
                archivos[0] = "";
                bitacora.push(username, "Realizo una carga Masiva Archivos");
                for (String line : archivos) {
                    if (line != "") {
                        String[] datos = line.split(",");
                        nodoMatriz.raiz = nodoMatriz.avl.insert(nodoMatriz.raiz, datos[0], datos[1], false,username);
                        JLabel archivo = new JLabel();
                        archivo.setToolTipText(datos[0]);
                        archivo.setName(datos[0]);
                        archivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd_2s2019_py2_201701029/file2.png")));
                        archivo.setText(datos[0]);
                        archivo.setHorizontalTextPosition(JLabel.CENTER);
                        archivo.setVerticalTextPosition(JLabel.BOTTOM);
                        archivo.addMouseListener(new MouseListener() {
                            @Override
                            public void mouseClicked(MouseEvent e) {
                                contClik += 1;
                                nombreFile = archivo.getName();
                                if (contClik == 2) {
                                    try {
                                        contClik = 0;
                                        MenuUser(username, Menu.nombbre(), nombreFile, carpeta);
                                    } catch (IOException ex) {
                                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (InterruptedException ex) {
                                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }

                            }

                            @Override
                            public void mousePressed(MouseEvent e) {

                            }

                            @Override
                            public void mouseReleased(MouseEvent e) {

                            }

                            @Override
                            public void mouseEntered(MouseEvent e) {

                            }

                            @Override
                            public void mouseExited(MouseEvent e) {

                            }

                        });
                        /*if(cont==4){
                         y+=13;
                         x=0;
                         cont=0;
                         }*/
                        archivo.setBounds(x, y, 50, 70);
                        y += 75;
                        if (y > 400) {
                            y = 0;
                            x += 60;
                        }
                        Menu.panelFile.add(archivo);
                        Menu.panelFile.repaint();
                    }
                }
            }

        });

        Menu.setVisible(true);
        Menu.setLocationRelativeTo(null);
    }

    public void crearArchivo(NodeAVL file) throws FileNotFoundException, UnsupportedEncodingException {
        PrintWriter archivo = new PrintWriter(System.getProperty("user.dir") + "\\" + file.nombreArchivo, "UTF-8");
        archivo.write(file.contenido);
        archivo.close();
    }

    public void crearCarpeta(String ruta, String username, File carpeta) {
        directorio = new File(carpeta.getAbsoluteFile() + "\\" + ruta);
        if (!directorio.exists()) {
            if (directorio.mkdirs()) {
                System.out.println("Directorio creado");
            } else {
                System.out.println("Error al crear directorio");
                return;
            }
        }
    }

    public void EliminarCarpeta(String username, String nombreFile, File carpeta) {
        contClik = 0;
        try {
            Runtime.getRuntime().exec("cmd /c RD " + nombreFile, null, carpeta);
            Runtime.getRuntime().exec("cmd /c del " + nombreFile, null, carpeta);
        } catch (IOException ex) {
            System.out.println("No se pudo Eliminar");
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void EliminarArchivo(String username, String nombreFile, File carpeta) throws InterruptedException {
        contClik = 0;
        try {
            Runtime.getRuntime().exec("cmd /c del " + nombreFile, null, carpeta);
            Thread.sleep(500);
        } catch (IOException ex) {
            System.out.println("No se pudo Eliminar");
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public JLabel returnJlabel(String nombre) {
        JLabel archivo = new JLabel();
        archivo.setToolTipText(nombre);
        archivo.setName(nombre);
        archivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edd_2s2019_py2_201701029/file2.png")));
        archivo.setText(nombre);
        archivo.setHorizontalTextPosition(JLabel.CENTER);
        archivo.setVerticalTextPosition(JLabel.BOTTOM);
        archivo.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                contClik += 1;
                nombreFile = archivo.getName();
                System.out.println(nombreFile);
                if (contClik == 2) {
                    contClik = 0;
                    try {
                        String ruta = carpeta.getAbsolutePath();
                        try {
                            String prueba = ruta.substring(ruta.length() - nombreFile.length(), ruta.length());
                            if (prueba.equals(nombreFile)) {
                                ruta = carpeta.getAbsolutePath();
                            } else {
                                ruta = carpeta.getAbsolutePath() + "\\" + nombreFile;
                            }
                        } catch (Exception ex) {
                        }
                        carpeta = new File(ruta);
                        MenuUser(username, carpetaPadre, nombreFile, carpeta);

                    } catch (IOException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });

        /*if(cont==4){
         y+=13;
         x=0;
         cont=0;
         }*/
        archivo.setBounds(x, y, 50, 70);
        y += 75;
        if (y > 400) {
            y = 0;
            x += 60;
        }
        return archivo;
    }
    public void jframeReporte(String ruta){
        JFrame nuevo = new JFrame();
        JLabel jLabel1 = new JLabel();
        ImageIcon fot = new ImageIcon(System.getProperty("user.dir")+"\\"+ruta+".png");
        Icon icono = new ImageIcon(fot.getImage().getScaledInstance(700, 700, Image.SCALE_DEFAULT));
        jLabel1.setIcon(icono);
        nuevo.setSize(500,500);
        nuevo.add(jLabel1);
        nuevo.setVisible(true);
    }
    public String[] cargaMasiva(String ruta, String tipo) {
        String texto = "";
        String aux = "";
        File abre = new File(ruta);
        FileReader archivos = null;
        try {
            archivos = new FileReader(abre);
        } catch (FileNotFoundException e3) {
            e3.printStackTrace();
        }
        BufferedReader lee = new BufferedReader(archivos);
        try {
            while ((aux = lee.readLine()) != null) {
                texto += aux + "\n";
            }
        } catch (IOException e2) {
            e2.printStackTrace();
        }
        try {
            lee.close();
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        String[] valor = texto.split("\n");
        valor[0] = "";
        if (tipo.equals("usuarios")) {
            for (String val : valor) {
                if (val != "") {
                    String[] datos = val.split(",");
                    tabla.add(datos[0], datos[1]);
                }
            }
        }
        return valor;
    }

    public void Registro() {
        Registro1 nuevo = new Registro1(this, true);
        nuevo.Acept.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = nuevo.idUsername.getText();
                String password = nuevo.idPassword.getText();
                if(password.length()>8){
                    tabla.add(username, password);
                }else{
                    JOptionPane.showMessageDialog(null, "La contraseña debe ser mayor a 8 caracteres");
                }
                nuevo.dispose();
                tabla.reporte();
            }
        });
        nuevo.setLocationRelativeTo(this);
        nuevo.setSize(500, 500);
        nuevo.setVisible(true);
    }
    private void RegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrarActionPerformed
        Registro();
    }//GEN-LAST:event_RegistrarActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Login;
    private javax.swing.JButton Registrar;
    private javax.swing.JPasswordField idPassword;
    private javax.swing.JTextField idUsername;
    private javax.swing.JPanel jPanel1;
    private java.awt.Label label1;
    // End of variables declaration//GEN-END:variables
}
